{{/*
Generate a deployment
*/}}
{{- define "zimagi-lib.deployment" -}}
{{- $root := (index . 0) -}}
{{- $service := (index . 1) }}
{{- $app_deployment := ($service.deployment | default (dict )) -}}
---
apiVersion: {{ include "common.capabilities.deployment.apiVersion" $root }}
kind: Deployment
{{- $name := include "zimagi-lib.serviceName" (list $root $service) }}
{{ include "zimagi-lib.metadata" (list $root $service $name) }}
spec:
  replicas: {{ coalesce $app_deployment.replicaCount $root.Values.deployment.replicaCount }}
  {{ $updateStrategy := coalesce $app_deployment.updateStrategy $root.Values.deployment.updateStrategy -}}
  {{- if $updateStrategy -}}
  strategy:
    {{- toYaml $updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "zimagi-lib.selectorLabels" (list $root $service) | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "zimagi-lib.labels" (list $root $service) | nindent 8 }}
    spec:
      serviceAccountName: {{ $name | quote }}
      {{- $image := ($service.image | default (dict )) -}}
      {{- $imagePullSecrets := coalesce $image.pullSecrets $root.Values.image.pullSecrets -}}
      {{ if $imagePullSecrets }}
      imagePullSecrets:
        {{- range $secret := $imagePullSecrets }}
        - name: {{ $secret | quote }}
        {{ end -}}
      {{ end }}
      {{ $affinity := merge ($app_deployment.affinity | default (dict )) $root.Values.deployment.affinity -}}
      {{ if $affinity -}}
      affinity:
        {{- include "common.tplvalues.render" ( dict "value" $affinity "context" $root) | nindent 8 }}
      {{- else -}}
      {{- with merge $app_deployment $root.Values.deployment }}
      {{- if or .podAffinityPreset .podAntiAffinityPreset (and .nodeAffinityPreset.type .nodeAffinityPreset.key .nodeAffinityPreset.values) -}}
      affinity:
        {{ if .podAffinityPreset -}}
        podAffinity:
          {{- include "common.affinities.pods" (dict "type" .podAffinityPreset "component" $name "context" $root) | nindent 10 }}
        {{- end -}}
        {{ if .podAntiAffinityPreset -}}
        podAntiAffinity:
          {{- include "common.affinities.pods" (dict "type" .podAntiAffinityPreset "component" $name "context" $root) | nindent 10 }}
        {{- end -}}
        {{ if and .nodeAffinityPreset.type .nodeAffinityPreset.key .nodeAffinityPreset.values -}}
        nodeAffinity:
          {{- include "common.affinities.nodes" (dict "type" .nodeAffinityPreset.type "key" .nodeAffinityPreset.key "values" .nodeAffinityPreset.values) | nindent 10 }}
        {{- end -}}
      {{- end -}}
      {{- end -}}
      {{- end -}}
      {{- $nodeSelector := coalesce $app_deployment.nodeSelector $root.Values.deployment.nodeSelector -}}
      {{- if $nodeSelector }}
      nodeSelector:
        {{- include "common.tplvalues.render" (dict "value" $nodeSelector "context" $root) | nindent 8 }}
      {{- end -}}
      {{- $tolerations := coalesce $app_deployment.tolerations $root.Values.deployment.tolerations -}}
      {{- if $tolerations }}
      tolerations:
        {{- include "common.tplvalues.render" (dict "value" $tolerations "context" $root) | nindent 8 }}
      {{- end -}}
      {{- $priorityClassName := coalesce $app_deployment.priorityClassName $root.Values.deployment.priorityClassName -}}
      {{- if $priorityClassName -}}
      priorityClassName: {{ $priorityClassName | quote }}
      {{- end }}
      containers:
        - name: {{ $name }}
          {{- $imageRepository := coalesce $image.repository $root.Values.image.repository -}}
          {{- $imageImage := coalesce $image.image $root.Values.image.image -}}
          {{- $imageTag := coalesce $image.tag $root.Values.image.tag }}
          image: "{{ $imageRepository }}/{{ $imageImage }}:{{ $imageTag | default $root.Chart.AppVersion }}"
          imagePullPolicy: {{ coalesce $image.pullPolicy $root.Values.image.pullPolicy }}
          {{- $resources := merge ($app_deployment.resources | default (dict )) $root.Values.deployment.resources -}}
          {{- if $resources }}
          resources:
            {{- include "common.tplvalues.render" (dict "value" $resources "context" $root) | nindent 12 }}
          {{- end -}}
          {{- $imageEntrypoint := coalesce $image.entrypoint $root.Values.image.entrypoint -}}
          {{- if $imageEntrypoint }}
          command: {{- include "zimagi-lib.util.ensureList" $imageEntrypoint | nindent 12 }}
          {{- end -}}
          {{- $imageArgs := coalesce $image.args $root.Values.image.args -}}
          {{- if $imageArgs }}
          args: {{- include "zimagi-lib.util.ensureList" $imageArgs | nindent 12 }}
          {{- end -}}
          {{- $env_vars := merge ($app_deployment.env | default (dict )) $root.Values.deployment.env -}}
          {{- if $env_vars }}
          env:
            - name: KUBERNETES_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: KUBERNETES_SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
            - name: KUBERNETES_CONTAINER_CPU_REQUEST_MILLICORES
              valueFrom:
                resourceFieldRef:
                  resource: requests.cpu
                  divisor: 1m
            - name: KUBERNETES_CONTAINER_MEMORY_LIMIT_KILOBYTES
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
                  divisor: 1Ki
            {{- range $env_var, $env_value := $env_vars }}
            - name: {{ $env_var }}
              value: {{ tpl ($env_value | toString) $root | quote }}
            {{- end -}}
          {{- end }}
          envFrom:
            {{ range $config_map := coalesce $app_deployment.config $root.Values.deployment.config -}}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" $config_map "context" $root) }}
            {{ end -}}
            {{- range $secret := coalesce $app_deployment.secrets $root.Values.deployment.secrets -}}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" $secret "context" $root) }}
            {{ end -}}
          {{- $port_protocol := coalesce $app_deployment.protocol $root.Values.deployment.protocol -}}
          {{- $container_port := coalesce $app_deployment.port $root.Values.deployment.port -}}
          {{- $app_service := ($service.service | default (dict )) -}}
          {{- if $app_service.enabled }}
          ports:
            - name: gateway
              containerPort: {{ $container_port }}
          {{- with merge ($app_deployment.readinessProbe | default (dict )) $root.Values.deployment.readinessProbe }}
          readinessProbe:
            failureThreshold: {{ .failureThreshold }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            successThreshold: {{ .successThreshold }}
            timeoutSeconds: {{ .timeoutSeconds }}
            httpGet:
              scheme: {{ $port_protocol | upper }}
              port: {{ $container_port }}
              path: {{ .endpoint }}
          {{ end -}}
          {{- with merge ($app_deployment.livenessProbe | default (dict )) $root.Values.deployment.livenessProbe -}}
          livenessProbe:
            failureThreshold: {{ .failureThreshold }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            successThreshold: {{ .successThreshold }}
            timeoutSeconds: {{ .timeoutSeconds }}
            httpGet:
              scheme: {{ $port_protocol | upper }}
              port: {{ $container_port }}
              path: {{ .endpoint }}
          {{- end -}}
          {{- end -}}
      {{- $pvc := ($service.pvc | default (dict )) -}}
      {{- $pvc_claims := merge ($pvc.claims | default (dict )) $root.Values.pvc.claims -}}
      {{- $pvc_mounts := merge ($pvc.mounts | default (dict )) $root.Values.pvc.mounts -}}
      {{- $volumes := ($service.volumes | default (dict )) -}}
      {{- $config_mounts := merge ($volumes.config | default (dict )) $root.Values.volumes.config -}}
      {{- $secret_mounts := merge ($volumes.secret | default (dict )) $root.Values.volumes.secret }}
          volumeMounts:
            {{- range $path, $data := $pvc_mounts }}
            - mountPath: {{ $path }}
              {{- if kindIs "string" $data }}
              name: {{ $data }}
              {{- else }}
              name: {{ $data.name }}
              readOnly: {{ $data.readOnly | default false }}
              {{- if $data.subPath }}
              subPath: {{ $data.subPath }}
              {{- end }}
              {{- if $data.subPathExpr }}
              subPathExpr: {{ $data.subPathExpr }}
              {{- end }}
              {{- end -}}
            {{- end }}
            {{- range $path, $data := $config_mounts }}
            - mountPath: {{ $path }}
              readOnly: true
              {{- if kindIs "string" $data }}
              name: {{ $data }}
              {{- else }}
              name: {{ $data.name }}
              {{- if $data.subPath }}
              subPath: {{ $data.subPath }}
              {{- end }}
              {{- if $data.subPathExpr }}
              subPathExpr: {{ $data.subPathExpr }}
              {{- end }}
              {{- end -}}
            {{- end }}
            {{- range $path, $data := $secret_mounts }}
            - mountPath: {{ $path }}
              readOnly: true
              {{- if kindIs "string" $data }}
              name: {{ $data }}
              {{- else }}
              name: {{ $data.name }}
              {{- if $data.subPath }}
              subPath: {{ $data.subPath }}
              {{- end }}
              {{- if $data.subPathExpr }}
              subPathExpr: {{ $data.subPathExpr }}
              {{- end }}
              {{- end -}}
            {{- end }}
      volumes:
        {{- range $path, $data := $pvc_mounts }}
        {{- $pvc_name := include "zimagi-lib.volumeName" $data }}
        - name: {{ $pvc_name }}
          persistentVolumeClaim:
            claimName: {{ $pvc_name }}
        {{- end -}}
        {{- range $path, $data := $config_mounts }}
        {{- $config_name := include "zimagi-lib.volumeName" $data }}
        - name: {{ $config_name }}
          configMap:
            name: {{ $config_name }}
        {{- end -}}
        {{- range $path, $data := $secret_mounts }}
        {{- $secret_name := include "zimagi-lib.volumeName" $data }}
        - name: {{ $secret_name }}
          secret:
            secretName: {{ $secret_name }}
        {{- end -}}
{{- end -}}
