nameOverride: zimagi

labels: {}
annotations: {}

postgresql:
  enabled: false
  auth:
    database: zimagi
    username: zimagi
    password: zimagi
  primary:
    persistence:
      enabled: true

redis:
  enabled: false
  auth:
    password: zimagi

image:
  pullSecrets: []
  pullPolicy: IfNotPresent
  repository: registry.hub.docker.com
  image: zimagi/zimagi
  tag: 0.11.14

pvc:
  claims:
    lib:
      storageClass: nfs
      accessMode: ReadWriteMany
      size: 10Gi
  mounts:
    "/usr/local/lib/zimagi": lib

deployment:
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate

  priorityClassName: ""
  affinity: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []

  nodeSelector: {}
  tolerations: []
  resources:
    limits: {}
    requests: {}

  env:
    ZIMAGI_POSTGRES_HOST: '{{ include "zimagi.postgresql.fullname" . }}'
    ZIMAGI_POSTGRES_PORT: 5432
    ZIMAGI_POSTGRES_DB: "{{ .Values.postgresql.auth.database }}"
    ZIMAGI_POSTGRES_USER: "{{ .Values.postgresql.auth.username }}"
    ZIMAGI_POSTGRES_PASSWORD: "{{ .Values.postgresql.auth.password }}"
    ZIMAGI_REDIS_HOST: '{{ include "zimagi.redisMaster.fullname" . }}'
    ZIMAGI_REDIS_PORT: 6379
    ZIMAGI_REDIS_PASSWORD: "{{ .Values.redis.auth.password }}"

  config:
    - global
  secrets:
    - global

  protocol: HTTP
  port: 5000

  livenessProbe:
    enabled: true
    endpoint: "/status"
    failureThreshold: 1
    initialDelaySeconds: 60
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3

  readinessProbe:
    enabled: true
    endpoint: "/status"
    failureThreshold: 1
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3

autoscaling:
  minReplicas: 1
  maxReplicas: 4
  avgCpuUtilization: 70

service:
  type: ClusterIP
  protocol: http
  port: 80

zimagi:
  services:
    command-api:
      image:
        entrypoint: "zimagi-command"
      deployment:
        replicaCount: 1
        config:
          - global
          - command-api
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 4
      annotations:
        kubernetes.digitalocean.com/load-balancer-id: "command"
        service.beta.kubernetes.io/do-loadbalancer-name: "command-api"
        service.beta.kubernetes.io/do-loadbalancer-size-unit: "1"
        service.beta.kubernetes.io/do-loadbalancer-disable-lets-encrypt-dns-records: "true"
        service.beta.kubernetes.io/do-loadbalancer-enable-backend-keepalive: "true"
        service.beta.kubernetes.io/do-loadbalancer-protocol: "https"
        service.beta.kubernetes.io/do-loadbalancer-certificate-id: "${certificate_id}"
        service.beta.kubernetes.io/do-loadbalancer-healthcheck-protocol: "http"
        service.beta.kubernetes.io/do-loadbalancer-healthcheck-path: "/status"
        service.beta.kubernetes.io/do-loadbalancer-healthcheck-check-interval-seconds: "3"
        service.beta.kubernetes.io/do-loadbalancer-healthcheck-response-timeout-seconds: "5"
        service.beta.kubernetes.io/do-loadbalancer-healthcheck-unhealthy-threshold: "3"
        service.beta.kubernetes.io/do-loadbalancer-healthcheck-healthy-threshold: "5"

    data-api:
      image:
        entrypoint: "zimagi-data"
      deployment:
        replicaCount: 1
        config:
          - global
          - data-api
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 4

    scheduler:
      image:
        entrypoint: "zimagi-scheduler"
      deployment:
        replicaCount: 2
        protocol: ""
        config:
          - global
          - scheduler

    worker:
      image:
        entrypoint: "zimagi-worker"
      deployment:
        replicaCount: 1
        protocol: ""
        config:
          - global
          - worker
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 4
