labels: {}
annotations: {}

postgresql:
  enabled: true
  auth:
    existingSecret: zimagi-db # keys: postgres-password, replication-password, password
    database: zimagi
    username: zimagi
  primary:
    persistence:
      enabled: true
      size: 10Gi

redis:
  enabled: true
  auth:
    existingSecret: zimagi-db
    existingSecretPasswordKey: redis-password
  master:
    persistence:
      enabled: true
      size: 5Gi

image:
  pullSecrets: []
  pullPolicy: IfNotPresent
  repository: registry.hub.docker.com
  image: zimagi/zimagi
  tag: 0.12.2

roles:
  scheduler-config-updater:
    rules:
      - resources: configmaps
        resourceNames: scheduler
        verbs:
          - get
          - patch

  service-config-updater:
    rules:
      - resources: configmaps
        resourceNames:
          - command-api
          - data-api
        verbs:
          - get
          - patch

  job-executor:
    rules:
      - apiGroups: batch
        resources: jobs
        verbs:
          - get
          - list
          - create
          - delete

serviceAccounts:
  worker:
    access:
      - scheduler-config-updater
      - job-executor

pvc:
  claims:
    lib:
      storageClass: nfs
      accessMode: ReadWriteMany
      size: 10Gi
  mounts: {}

volumes:
  config: {}
  secret: {}

deployment:
  replicaCount: 1

  revisionHistoryLimit: 1
  updateStrategy:
    type: RollingUpdate

  priorityClassName: ""
  affinity: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []

  nodeSelector: {}
  tolerations: []
  resources:
    requests:
      cpu: "100m"
      memory: "100Mi"

  env:
    KUBERNETES_WORKER_SERVICE_ACCOUNT: worker
    ZIMAGI_WORKER_PROVIDER: kubernetes
    ZIMAGI_POSTGRES_HOST: '{{ include "zimagi.postgresql.fullname" . }}'
    ZIMAGI_POSTGRES_PORT: 5432
    ZIMAGI_POSTGRES_DB: "{{ .Values.postgresql.auth.database }}"
    ZIMAGI_POSTGRES_USER: "{{ .Values.postgresql.auth.username }}"
    ZIMAGI_REDIS_HOST: '{{ include "zimagi.redisMaster.fullname" . }}'
    ZIMAGI_REDIS_PORT: 6379

  config:
    - global
  secrets:
    - global

  protocol: HTTP
  port: 5000

  livenessProbe:
    endpoint: "/status"
    failureThreshold: 20
    initialDelaySeconds: 5
    periodSeconds: 6
    successThreshold: 1
    timeoutSeconds: 5

  readinessProbe:
    endpoint: "/status"
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 3
    timeoutSeconds: 5

autoscaling:
  minReplicas: 1
  maxReplicas: 4
  avgCpuUtilization: 70

service:
  type: ClusterIP
  protocol: http
  port: 80

ingress:
  className: ''
  hosts: []
  tls: []
  #   - secretName: origin-cert

services:
  command-api:
    image:
      entrypoint: "zimagi-command"
    access:
      - scheduler-config-updater
      - job-executor
    pvc:
      mounts:
        "/usr/local/lib/zimagi": lib
    deployment:
      config:
        - global
        - command-api
    autoscaling:
      enabled: false
    service:
      enabled: true
    ingress:
      enabled: false
      # hosts:
      #   - host: "command-api.${domain}"

  data-api:
    image:
      entrypoint: "zimagi-data"
    pvc:
      mounts:
        "/usr/local/lib/zimagi": lib
    deployment:
      config:
        - global
        - data-api
    autoscaling:
      enabled: false
    service:
      enabled: true
    ingress:
      enabled: false
      # hosts:
      #   - host: "data-api.${domain}"

  scheduler:
    image:
      entrypoint: "zimagi-scheduler"
    access:
      - service-config-updater
      - job-executor
    pvc:
      mounts:
        "/usr/local/lib/zimagi": lib
    deployment:
      config:
        - global
        - scheduler

  tasks:
    image:
      entrypoint: "celery-flower"
    deployment:
      config:
        - global
        - flower
      resources:
        requests:
          cpu: "20m"
          memory: "50Mi"
    autoscaling:
      enabled: false
    service:
      enabled: true
    ingress:
      enabled: false
      # hosts:
      #   - host: "tasks.${domain}"
