# Default values for zimagi.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

postgresql:
  enabled: true
  postgresqlDatabase: "zimagi"
  postgresqlUsername: "zimagi"
  postgresqlPassword: "zimagi"
  persistence:
    enabled: false

redis:
  auth:
    password: "zimagi"

global:
  image:
    repository: zimagi/zimagi
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

commandApi:
  replicaCount: 1

  updateStrategy:
    type: RollingUpdate

  podAffinityPreset: ""

  podAntiAffinityPreset: soft

  nodeAffinityPreset:
    type: ""
    key: ""
    values: []

  affinity: {}

  nodeSelector: {}

  tolerations: []

  priorityClassName: ""

  podSecurityContext:
    enabled: false
    fsGroup: 1001

  containerSecurityContext:
    enabled: false
    privileged: true
    runAsUser: 0

  psp:
    create: false

  args: []

  extraEnv: []

  containerPort: 5123

  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 3
    failureThreshold: 1
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 3
    failureThreshold: 1
    successThreshold: 1

  serviceAccount:
    create: true
    name: ""

  rbac:
    create: true

  resources:
    limits: {}
    requests: {}

  autoscaling:
    enabled: false
    maxReplicas: 4
    minReplicas: 1
    averageUtilization: 70

  extraEnvVarsCM: {}
  extraEnvVarsSecret: {}
  extraVolumes: {}
  extraVolumeMounts: {}

dataApi:
  replicaCount: 1

  updateStrategy:
    type: RollingUpdate

  podAffinityPreset: ""

  podAntiAffinityPreset: soft

  nodeAffinityPreset:
    type: ""
    key: ""
    values: []

  affinity: {}

  nodeSelector: {}

  tolerations: []

  priorityClassName: ""

  podSecurityContext:
    enabled: false
    fsGroup: 1001

  containerSecurityContext:
    enabled: false
    privileged: true
    runAsUser: 0

  psp:
    create: false

  args: []

  extraEnv: []

  containerPort: 5323

  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 3
    failureThreshold: 1
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 3
    failureThreshold: 1
    successThreshold: 1

  serviceAccount:
    create: true
    name: ""

  rbac:
    create: true

  resources:
    limits: {}
    requests: {}

  autoscaling:
    enabled: false
    maxReplicas: 4
    minReplicas: 1
    averageUtilization: 70

  extraEnvVarsCM: {}
  extraEnvVarsSecret: {}
  extraVolumes: {}
  extraVolumeMounts: {}

scheduler:
  replicaCount: 1

  updateStrategy:
    type: RollingUpdate

  podAffinityPreset: ""

  podAntiAffinityPreset: soft

  nodeAffinityPreset:
    type: ""
    key: ""
    values: []

  affinity: {}

  nodeSelector: {}

  tolerations: []

  priorityClassName: ""

  podSecurityContext:
    enabled: false
    fsGroup: 1001

  containerSecurityContext:
    enabled: false
    privileged: true
    runAsUser: 0

  psp:
    create: false

  args: []

  extraEnv: []

  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 3
    failureThreshold: 1
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 3
    failureThreshold: 1
    successThreshold: 1

  serviceAccount:
    create: true
    name: ""

  rbac:
    create: true

  resources:
    limits: {}
    requests: {}

  autoscaling:
    enabled: false
    maxReplicas: 4
    minReplicas: 1
    averageUtilization: 70

  extraEnvVarsCM: {}
  extraEnvVarsSecret: {}
  extraVolumes: {}
  extraVolumeMounts: {}

worker:
  replicaCount: 0

  updateStrategy:
    type: RollingUpdate

  podAffinityPreset: ""

  podAntiAffinityPreset: soft

  nodeAffinityPreset:
    type: ""
    key: ""
    values: []

  affinity: {}

  nodeSelector: {
    zimagi: worker
  }

  tolerations: []

  priorityClassName: ""

  podSecurityContext:
    enabled: false
    fsGroup: 1001

  containerSecurityContext:
    enabled: false
    privileged: true
    runAsUser: 0

  psp:
    create: false

  args: []

  extraEnv: []

  containerPort: 8080

  livenessProbe:
    enabled: false
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 3
    failureThreshold: 1
    successThreshold: 1

  readinessProbe:
    enabled: false
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 3
    failureThreshold: 1
    successThreshold: 1

  serviceAccount:
    create: true
    name: ""

  rbac:
    create: true

  resources:
    limits: {}
    requests: {}

  autoscaling:
    enabled: false
    maxReplicas: 4
    minReplicas: 1
    averageUtilization: 70

  extraEnvVarsCM: {}
  extraEnvVarsSecret: {}
  extraVolumes: {}
  extraVolumeMounts: {}


service:
  commandApi:
    type: ClusterIP
    port: 80
    tlsPort: 443
    nodePort: null
    tlsNodePort: null
    containerPort: 5123
  dataApi:
    type: ClusterIP
    port: 80
    tlsPort: 443
    nodePort: null
    tlsNodePort: null
    containerPort: 5323



replicaCount: 1

image:
  pullPolicy: IfNotPresent
  repository: zimagi/zimagi
  tag: 0.6.2-dev
imagePullSecrets: []

nameOverride: ''
nodeSelector: {}
podAnnotations: {}
podSecurityContext: {}
postgres: {}
redis: {}
replicaCount: 1
resources: {}
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hostName: ""
  http:
    path: ""
    servicePort: 80