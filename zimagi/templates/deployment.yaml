apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "zimagi.fullname" . }}
  labels:
    {{- include "zimagi.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "zimagi.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "zimagi.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "zimagi.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Release.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.entrypoint }}
          command:
          - {{ .Values.entrypoint }}
          {{- end }}
          {{- if .Values.entrypoint }}
          ports:
            {{- if eq .Values.entrypoint "zimagi-command" }}
            - name: comand
              containerPort: {{ .Values.service.command.targetPort }}
              protocol: TCP
            {{- end }}
            {{- if eq .Values.entrypoint "zimagi-data" }}
            - name: data
              containerPort: {{ .Values.service.data.targetPort }}
              protocol: TCP
            {{- end }}
          {{- end }}
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
          - name: ZIMAGI_COMMAND_PORT
            value: {{ .Values.service.command.targetPort | quote }}
          - name: ZIMAGI_DATA_PORT
            value: {{ .Values.service.data.targetPort | quote }}
          - name: ZIMAGI_POSTGRES_HOST
            value: {{ .Values.postgres.host | quote }}
          - name: ZIMAGI_POSTGRES_PORT
            value: {{ .Values.postgres.port | quote }}
          - name: ZIMAGI_REDIS_HOST
            value: {{ .Values.redis.host | quote }}
          - name: ZIMAGI_REDIS_PORT
            value: {{ .Values.redis.port | quote }}
          - name: ZIMAGI_POSTGRES_USER
            value: {{ .Values.postgres.user | quote }}
          - name: ZIMAGI_POSTGRES_PASSWORD
            value: {{ .Values.postgres.pass | quote }}
          - name: ZIMAGI_POSTGRES_DB
            value: {{ .Values.postgres.database | quote }}
          - name: ZIMAGI_REDIS_PASSWORD
            value: {{ .Values.redis.pass | quote }}
          - name: ZIMAGI_WORKER_CONCURRENCY
            value: {{ .Values.workerConcurrency | default 2 | quote }}
          - name: ZIMAGI_LOG_LEVEL
            value: {{ .Values.logLevel | default "info" | quote }}
          - name: ZIMAGI_TIME_ZONE
            value: {{ .Values.timezone | default "America/New_York" | quote }}
          {{- if .Values.extraEnv }}
          {{- include "postgresql.tplValue" (dict "value" .Values.extraEnv "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: dockersock
              mountPath: "/var/run/docker.sock"
          {{- if eq .Values.entrypoint "zimagi-command" }}
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /status
              port: {{ .Values.service.command.targetPort }}
            initialDelaySeconds: 30
            periodSeconds: 5
          {{- end }}
          {{- if eq .Values.entrypoint "zimagi-data" }}
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /status
              port: {{ .Values.service.command.targetPort }}
            initialDelaySeconds: 30
            periodSeconds: 5
          {{- end }}
          {{- if eq .Values.entrypoint "zimagi-command" }}
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /status
              port: {{ .Values.service.command.targetPort }}
            initialDelaySeconds: 90
            periodSeconds: 10
          {{- end }}
          {{- if eq .Values.entrypoint "zimagi-data" }}
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /status
              port: {{ .Values.service.data.targetPort }}
            initialDelaySeconds: 90
            periodSeconds: 10
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock  
      - name: share
        emptyDir: {}
      - name: server
        emptyDir: {}
      - name: lib
        emptyDir: {}
